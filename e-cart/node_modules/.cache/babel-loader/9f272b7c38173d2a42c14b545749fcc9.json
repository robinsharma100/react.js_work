{"ast":null,"code":"var _jsxFileName = \"D:\\\\react.js\\\\ecart\\\\src\\\\allfiles\\\\dummy.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\n/*function Dummy() {\r\n  const [items, setItems] = useState([]);\r\n  const [itemName, setItemName] = useState(\"\");\r\n\r\n  const addItem = event => {\r\n    event.preventDefault();\r\n    setItems([\r\n      ...items,\r\n      {\r\n        id: items.length,\r\n        name: itemName\r\n      }\r\n    ]);\r\n    setItemName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={addItem}>\r\n        <label>\r\n          <input\r\n            name=\"item\"\r\n            type=\"text\"\r\n            value={itemName}\r\n            onChange={e => setItemName(e.target.value)}\r\n          />\r\n        </label>\r\n      </form>\r\n      <ul>\r\n        {items.map(item => (\r\n          <li key={item.id}>{item.name}</li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\nexport default Dummy*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dummy = () => {\n  _s();\n\n  const [newno, setNewNo] = useState('');\n  const [itemname, setItemName] = useState('');\n\n  const getLocalItems = () => {\n    let List = localStorage.get('lists');\n    console.log('get local item () = ', List);\n\n    if (List) {\n      return JSON.parse(localStorage.getItem('lists'));\n    } else {\n      return [];\n    }\n  };\n\n  const [inputs, setInputs] = useState(getLocalItems());\n\n  const SubmitHandle = e => {\n    e.preventDefault();\n    setInputs([...inputs, {\n      id: inputs.length,\n      name: itemname,\n      no: newno\n    }]);\n    console.log(inputs);\n  };\n\n  useEffect(() => {\n    localStorage.setItem('lists', JSON.stringify(inputs));\n  }, [inputs]);\n  /* const submitHandle = e => {\r\n  \n     e.preventDefault();\r\n      setState([...state,inputs]);\r\n     \r\n     console.log(state);\r\n   }*/\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: SubmitHandle,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        value: itemname,\n        onChange: e => setItemName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"number\",\n        value: newno,\n        onChange: e => setNewNo(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: inputs.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item.name\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Dummy, \"J0f7d2DTUYrk6iM8sReTLTgsIUU=\");\n\n_c = Dummy;\nexport default Dummy;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dummy\");","map":{"version":3,"sources":["D:/react.js/ecart/src/allfiles/dummy.js"],"names":["React","useEffect","useState","Dummy","newno","setNewNo","itemname","setItemName","getLocalItems","List","localStorage","get","console","log","JSON","parse","getItem","inputs","setInputs","SubmitHandle","e","preventDefault","id","length","name","no","setItem","stringify","target","value","map","item"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAElB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAM,CAACI,QAAD,EAAUC,WAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;;AAEA,QAAMM,aAAa,GAAC,MAAI;AACtB,QAAIC,IAAI,GAAGC,YAAY,CAACC,GAAb,CAAiB,OAAjB,CAAX;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAmCJ,IAAnC;;AAEA,QAAGA,IAAH,EAAQ;AACN,aAAOK,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACM,OAAb,CAAqB,OAArB,CAAX,CAAP;AACD,KAFD,MAEM;AACJ,aAAO,EAAP;AACD;AACF,GATD;;AAWA,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAoBhB,QAAQ,CAACM,aAAa,EAAd,CAAlC;;AAIA,QAAMW,YAAY,GAAGC,CAAC,IAAI;AAExBA,IAAAA,CAAC,CAACC,cAAF;AACAH,IAAAA,SAAS,CAAC,CACR,GAAGD,MADK,EAER;AACAK,MAAAA,EAAE,EAACL,MAAM,CAACM,MADV;AAEAC,MAAAA,IAAI,EAAClB,QAFL;AAGAmB,MAAAA,EAAE,EAACrB;AAHH,KAFQ,CAAD,CAAT;AASAQ,IAAAA,OAAO,CAACC,GAAR,CAAYI,MAAZ;AAED,GAdD;;AAgBAhB,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,YAAY,CAACgB,OAAb,CAAqB,OAArB,EAA6BZ,IAAI,CAACa,SAAL,CAAeV,MAAf,CAA7B;AACC,GAFM,EAEJ,CAACA,MAAD,CAFI,CAAT;AAID;AACD;AACA;AACA;AACA;AACA;AACA;;AAEE,sBACE;AAAA,4BACA;AAAM,MAAA,QAAQ,EAAEE,YAAhB;AAAA,8BACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,MAAxB;AAA+B,QAAA,KAAK,EAAEb,QAAtC;AAAgD,QAAA,QAAQ,EAAEc,CAAC,IAAIb,WAAW,CAACa,CAAC,CAACQ,MAAF,CAASC,KAAV;AAA1E;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,IAAI,EAAC,QAA1B;AAAmC,QAAA,KAAK,EAAEzB,KAA1C;AAAiD,QAAA,QAAQ,EAAEgB,CAAC,IAAIf,QAAQ,CAACe,CAAC,CAACQ,MAAF,CAASC,KAAV;AAAxE;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAMA;AAAA,gBACKZ,MAAM,CAACa,GAAP,CAAWC,IAAI,iBACd;AAAA,kBAAmBA,IAAI,CAACP;AAAxB,SAASO,IAAI,CAACT,EAAd;AAAA;AAAA;AAAA;AAAA,cADD;AADL;AAAA;AAAA;AAAA;AAAA,YANA;AAAA,kBADF;AAcD,CA/DD;;GAAMnB,K;;KAAAA,K;AAiEN,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\n/*function Dummy() {\r\n  const [items, setItems] = useState([]);\r\n  const [itemName, setItemName] = useState(\"\");\r\n\r\n  const addItem = event => {\r\n    event.preventDefault();\r\n    setItems([\r\n      ...items,\r\n      {\r\n        id: items.length,\r\n        name: itemName\r\n      }\r\n    ]);\r\n    setItemName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={addItem}>\r\n        <label>\r\n          <input\r\n            name=\"item\"\r\n            type=\"text\"\r\n            value={itemName}\r\n            onChange={e => setItemName(e.target.value)}\r\n          />\r\n        </label>\r\n      </form>\r\n      <ul>\r\n        {items.map(item => (\r\n          <li key={item.id}>{item.name}</li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\nexport default Dummy*/\r\nconst Dummy = () => {\r\n\r\n  const [newno, setNewNo] = useState('');\r\n  \r\n  const [itemname,setItemName]= useState('');\r\n  \r\n  const getLocalItems=()=>{\r\n    let List = localStorage.get('lists');\r\n    console.log('get local item () = ',List);\r\n\r\n    if(List){\r\n      return JSON.parse(localStorage.getItem('lists'));\r\n    }else {\r\n      return [];\r\n    }\r\n  }\r\n  \r\n  const [inputs,setInputs]= useState(getLocalItems());\r\n\r\n  \r\n\r\n  const SubmitHandle = e => {\r\n    \r\n    e.preventDefault();\r\n    setInputs([\r\n      ...inputs,\r\n      {\r\n      id:inputs.length,\r\n      name:itemname,\r\n      no:newno\r\n    }]);\r\n    \r\n    \r\n    console.log(inputs);\r\n   \r\n  }\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('lists',JSON.stringify(inputs))\r\n    }, [inputs]);\r\n  \r\n /* const submitHandle = e => {\r\n\r\n    e.preventDefault();\r\n     setState([...state,inputs]);\r\n    \r\n    console.log(state);\r\n  }*/\r\n  \r\n  return (\r\n    <>\r\n    <form onSubmit={SubmitHandle}>\r\n      <input type=\"text\" name=\"name\" value={itemname} onChange={e => setItemName(e.target.value)} />\r\n      <input type=\"number\" name=\"number\" value={newno} onChange={e => setNewNo(e.target.value)} />\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n    <ul>\r\n        {inputs.map(item => (\r\n          <li key={item.id}>{item.name}</li>\r\n        ))}\r\n      </ul>\r\n   </>\r\n  );\r\n}\r\n\r\nexport default Dummy;"]},"metadata":{},"sourceType":"module"}